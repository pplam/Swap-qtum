#!/usr/bin/env node

const args = process.argv.slice(2)
if (args.length < 5) {
  console.log('Usage:\n\tswap <from> <fromHex> <to_chain> <to_address> <amount>')
  process.exit(1)
}

const colors = require('colors')
const { encodeInputs, Contract, QtumRPC } = require('qtumjs')

const rpc = new QtumRPC('http://qtum:test@localhost:3889')
const abi = require('../abis/ATN.json').contracts['atn-contracts/ATN.sol']
const swapAddress = require('../abis/SWAP.json').contracts['Swap.sol'].address
const atn = new Contract(rpc, abi)

const transferABI = {
  name: "transfer",
  type: "function",
  payable: false,
  inputs: [
    {
      name: "_to",
      type: "address",
      indexed: false
    },
    {
      name: "_amount",
      type: "uint256",
      indexed: false
    },
    {
      name: "_data",
      type: "bytes",
      indexed: false
    }
  ],
  outputs: [
    {
      name: "success",
      type: "bool",
      indexed: false
    }
  ],
  constant: false,
  anonymous: false
}

async function swap(from, fromHex, to_chain, to_address, amount) {
  const data = string2bytes32(to_chain) + to_address.substring(2)
  console.log(data)

  let b = await atn.call('balanceOf', [fromHex])
  console.log(colors.green('=====>Balance before swap:'))
  console.log(b.outputs[0].toNumber())
  console.log()

  const calldata = encodeInputs(transferABI, [swapAddress, amount, data])
  const sent = await atn.rpc.sendToContract({
    datahex: calldata,
    address: atn.address,
    senderAddress: from
  })
  const txid = sent.txid
  const txinfo = await atn.rpc.getTransaction({txid})
  const sendTx = {
    ...txinfo,
    method: 'transfer',
    confirm: (n, handler) => atn.confirm(sendTx, n, handler)
  }
  console.log(colors.green('=====>Transfer tx:'))
  console.log(JSON.stringify({
    txid: sendTx.txid,
    method: sendTx.method,
    fee: sendTx.fee,
    confirmations: sendTx.confirmations
  }, null, 2))
  console.log()

  console.log(colors.green('=====>Waiting for transaction confirmation...'))
  console.log()
  await sendTx.confirm(1)

  b = await atn.call('balanceOf', [fromHex])
  console.log(colors.green('=====>Balance after swap:'))
  console.log(b.outputs[0].toNumber())
}

function string2bytes32(str) {
  const hex = Buffer.from(str).toString('hex')
  const pad = Array(65 - hex.length).join('0')
  return `0x${pad}${hex}`
}

const alloc = require('../utils/allocQtum')
alloc(args[0], 0.01).then((res) => {
  swap(...args)
})
